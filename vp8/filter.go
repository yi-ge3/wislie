// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package vp8

// filter2 modifies a 2-pixel wide or 2-pixel high band along an edge.
func filter2(pix []byte, level, index, iStep, jStep int) {
	for n := 16; n > 0; n, index = n-1, index+iStep {
		p1 := int(pix[index-2*jStep])
		p0 := int(pix[index-1*jStep])
		q0 := int(pix[index+0*jStep])
		q1 := int(pix[index+1*jStep])
		if int(lutAbs[lutAbsBase+p0-q0])<<1+int(lutAbs[lutAbsBase+p1-q1])>>1 > level {
			continue
		}
		a := 3*(q0-p0) + int(lutClamp127[lutClamp127Base+p1-q1])
		a1 := int(lutClamp15[lutClamp15Base+((a+4)>>3)])
		a2 := int(lutClamp15[lutClamp15Base+((a+3)>>3)])
		pix[index-1*jStep] = lutClamp255[lutClamp255Base+p0+a2]
		pix[index+0*jStep] = lutClamp255[lutClamp255Base+q0-a1]
	}
}

// filter246 modifies a 2-, 4- or 6-pixel wide or high band along an edge.
func filter246(pix []byte, n, level, ilevel, hlevel, index, iStep, jStep int, fourNotSix bool) {
	for ; n > 0; n, index = n-1, index+iStep {
		p3 := int(pix[index-4*jStep])
		p2 := int(pix[index-3*jStep])
		p1 := int(pix[index-2*jStep])
		p0 := int(pix[index-1*jStep])
		q0 := int(pix[index+0*jStep])
		q1 := int(pix[index+1*jStep])
		q2 := int(pix[index+2*jStep])
		q3 := int(pix[index+3*jStep])
		if int(lutAbs[lutAbsBase+p0-q0])<<1+int(lutAbs[lutAbsBase+p1-q1])>>1 > level {
			continue
		}
		if int(lutAbs[lutAbsBase+p3-p2]) > ilevel ||
			int(lutAbs[lutAbsBase+p2-p1]) > ilevel ||
			int(lutAbs[lutAbsBase+p1-p0]) > ilevel ||
			int(lutAbs[lutAbsBase+q1-q0]) > ilevel ||
			int(lutAbs[lutAbsBase+q2-q1]) > ilevel ||
			int(lutAbs[lutAbsBase+q3-q2]) > ilevel {
			continue
		}
		if int(lutAbs[lutAbsBase+p1-p0]) > hlevel || int(lutAbs[lutAbsBase+q1-q0]) > hlevel {
			// Filter 2 pixels.
			a := 3*(q0-p0) + int(lutClamp127[lutClamp127Base+p1-q1])
			a1 := int(lutClamp15[lutClamp15Base+((a+4)>>3)])
			a2 := int(lutClamp15[lutClamp15Base+((a+3)>>3)])
			pix[index-1*jStep] = lutClamp255[lutClamp255Base+p0+a2]
			pix[index+0*jStep] = lutClamp255[lutClamp255Base+q0-a1]
		} else if fourNotSix {
			// Filter 4 pixels.
			a := 3 * (q0 - p0)
			a1 := int(lutClamp15[lutClamp15Base+((a+4)>>3)])
			a2 := int(lutClamp15[lutClamp15Base+((a+3)>>3)])
			a3 := (a1 + 1) >> 1
			pix[index-2*jStep] = lutClamp255[lutClamp255Base+p1+a3]
			pix[index-1*jStep] = lutClamp255[lutClamp255Base+p0+a2]
			pix[index+0*jStep] = lutClamp255[lutClamp255Base+q0-a1]
			pix[index+1*jStep] = lutClamp255[lutClamp255Base+q1-a3]
		} else {
			// Filter 6 pixels.
			a := 3*(q0-p0) + int(lutClamp127[lutClamp127Base+p1-q1])
			a = int(lutClamp127[lutClamp127Base+a])
			a1 := (27*a + 63) >> 7
			a2 := (18*a + 63) >> 7
			a3 := (9*a + 63) >> 7
			pix[index-3*jStep] = lutClamp255[lutClamp255Base+p2+a3]
			pix[index-2*jStep] = lutClamp255[lutClamp255Base+p1+a2]
			pix[index-1*jStep] = lutClamp255[lutClamp255Base+p0+a1]
			pix[index+0*jStep] = lutClamp255[lutClamp255Base+q0-a1]
			pix[index+1*jStep] = lutClamp255[lutClamp255Base+q1-a2]
			pix[index+2*jStep] = lutClamp255[lutClamp255Base+q2-a3]
		}
	}
}

// simpleFilter implements the simple filter, as specified in section 15.2.
func (d *Decoder) simpleFilter() {
	for mby := 0; mby < d.mbh; mby++ {
		for mbx := 0; mbx < d.mbw; mbx++ {
			f := d.perMBFilterParams[d.mbw*mby+mbx]
			if f.level == 0 {
				continue
			}
			l := int(f.level)
			yIndex := (mby*d.img.YStride + mbx) * 16
			if mbx > 0 {
				filter2(d.img.Y, l+4, yIndex, d.img.YStride, 1)
			}
			if f.inner {
				filter2(d.img.Y, l, yIndex+0x4, d.img.YStride, 1)
				filter2(d.img.Y, l, yIndex+0x8, d.img.YStride, 1)
				filter2(d.img.Y, l, yIndex+0xc, d.img.YStride, 1)
			}
			if mby > 0 {
				filter2(d.img.Y, l+4, yIndex, 1, d.img.YStride)
			}
			if f.inner {
				filter2(d.img.Y, l, yIndex+d.img.YStride*0x4, 1, d.img.YStride)
				filter2(d.img.Y, l, yIndex+d.img.YStride*0x8, 1, d.img.YStride)
				filter2(d.img.Y, l, yIndex+d.img.YStride*0xc, 1, d.img.YStride)
			}
		}
	}
}

// normalFilter implements the normal filter, as specified in section 15.3.
func (d *Decoder) normalFilter() {
	for mby := 0; mby < d.mbh; mby++ {
		for mbx := 0; mbx < d.mbw; mbx++ {
			f := d.perMBFilterParams[d.mbw*mby+mbx]
			if f.level == 0 {
				continue
			}
			l, il, hl := int(f.level), int(f.ilevel), int(f.hlevel)
			yIndex := (mby*d.img.YStride + mbx) * 16
			cIndex := (mby*d.img.CStride + mbx) * 8
			if mbx > 0 {
				filter246(d.img.Y, 16, l+4, il, hl, yIndex, d.img.YStride, 1, false)
				filter246(d.img.Cb, 8, l+4, il, hl, cIndex, d.img.CStride, 1, false)
				filter246(d.img.Cr, 8, l+4, il, hl, cIndex, d.img.CStride, 1, false)
			}
			if f.inner {
				filter246(d.img.Y, 16, l, il, hl, yIndex+0x4, d.img.YStride, 1, true)
				filter246(d.img.Y, 16, l, il, hl, yIndex+0x8, d.img.YStride, 1, true)
				filter246(d.img.Y, 16, l, il, hl, yIndex+0xc, d.img.YStride, 1, true)
				filter246(d.img.Cb, 8, l, il, hl, cIndex+0x4, d.img.CStride, 1, true)
				filter246(d.img.Cr, 8, l, il, hl, cIndex+0x4, d.img.CStride, 1, true)
			}
			if mby > 0 {
				filter246(d.img.Y, 16, l+4, il, hl, yIndex, 1, d.img.YStride, false)
				filter246(d.img.Cb, 8, l+4, il, hl, cIndex, 1, d.img.CStride, false)
				filter246(d.img.Cr, 8, l+4, il, hl, cIndex, 1, d.img.CStride, false)
			}
			if f.inner {
				filter246(d.img.Y, 16, l, il, hl, yIndex+d.img.YStride*0x4, 1, d.img.YStride, true)
				filter246(d.img.Y, 16, l, il, hl, yIndex+d.img.YStride*0x8, 1, d.img.YStride, true)
				filter246(d.img.Y, 16, l, il, hl, yIndex+d.img.YStride*0xc, 1, d.img.YStride, true)
				filter246(d.img.Cb, 8, l, il, hl, cIndex+d.img.CStride*0x4, 1, d.img.CStride, true)
				filter246(d.img.Cr, 8, l, il, hl, cIndex+d.img.CStride*0x4, 1, d.img.CStride, true)
			}
		}
	}
}

// filterParam holds the loop filter parameters for a macroblock.
type filterParam struct {
	// The first three fields are thresholds used by the loop filter to smooth
	// over the edges and interior of a macroblock. level is used by both the
	// simple and normal filters. The inner level and high edge variance level
	// are only used by the normal filter.
	level, ilevel, hlevel uint8
	// inner is whether the inner loop filter cannot be optimized out as a
	// no-op for this particular macroblock.
	inner bool
}

// computeFilterParams computes the loop filter parameters, as specified in
// section 15.4.
func (d *Decoder) computeFilterParams() {
	for i := range d.filterParams {
		baseLevel := d.filterHeader.level
		if d.segmentHeader.useSegment {
			baseLevel = d.segmentHeader.filterStrength[i]
			if d.segmentHeader.relativeDelta {
				baseLevel += d.filterHeader.level
			}
		}

		for j := range d.filterParams[i] {
			p := &d.filterParams[i][j]
			p.inner = j != 0
			level := baseLevel
			if d.filterHeader.useLFDelta {
				// The libwebp C code has a "TODO: only CURRENT is handled for now."
				level += d.filterHeader.refLFDelta[0]
				if j != 0 {
					level += d.filterHeader.modeLFDelta[0]
				}
			}
			if level <= 0 {
				p.level = 0
				continue
			}
			if level > 63 {
				level = 63
			}
			ilevel := level
			if d.filterHeader.sharpness > 0 {
				if d.filterHeader.sharpness > 4 {
					ilevel >>= 2
				} else {
					ilevel >>= 1
				}
				if x := int8(9 - d.filterHeader.sharpness); ilevel > x {
					ilevel = x
				}
			}
			if ilevel < 1 {
				ilevel = 1
			}
			p.ilevel = uint8(ilevel)
			p.level = uint8(2*level + ilevel)
			if d.frameHeader.KeyFrame {
				if level < 15 {
					p.hlevel = 0
				} else if level < 40 {
					p.hlevel = 1
				} else {
					p.hlevel = 2
				}
			} else {
				if level < 15 {
					p.hlevel = 0
				} else if level < 20 {
					p.hlevel = 1
				} else if level < 40 {
					p.hlevel = 2
				} else {
					p.hlevel = 3
				}
			}
		}
	}
}

// Look-up tables.
//
// TODO(nigeltao): are these actually worth it in Go, as opposed to C,
// due to the bounds checking?

const lutAbsBase = 255

// lutAbs[lutAbsBase+x] is equal to abs(x), for x in [-255, 255].
var lutAbs = [255 + 1 + 255]uint8{
	0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0,
	0xef, 0xee, 0xed, 0xec, 0xeb, 0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1, 0xe0,
	0xdf, 0xde, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6, 0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0,
	0xcf, 0xce, 0xcd, 0xcc, 0xcb, 0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1, 0xc0,
	0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0,
	0xaf, 0xae, 0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0,
	0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90,
	0x8f, 0x8e, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80,
	0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x76, 0x75, 0x74, 0x73, 0x72, 0x71, 0x70,
	0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60,
	0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50,
	0x4f, 0x4e, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40,
	0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30,
	0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
	0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
	0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,
	0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40,
	0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50,
	0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60,
	0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,
	0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80,
	0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90,
	0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0,
	0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0,
	0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0,
	0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0,
	0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0,
	0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0,
	0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
}

const lutClamp15Base = 255

// lutClamp15[lutClamp15Base+x] is equal to clamp(x, -16, +15), for x in [-255, 255].
var lutClamp15 = [255 + 1 + 255]int8{
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10, -0x10,
	-0x0f, -0x0e, -0x0d, -0x0c, -0x0b, -0x0a, -0x09, -0x08,
	-0x07, -0x06, -0x05, -0x04, -0x03, -0x02, -0x01, +0x00,
	+0x01, +0x02, +0x03, +0x04, +0x05, +0x06, +0x07, +0x08,
	+0x09, +0x0a, +0x0b, +0x0c, +0x0d, +0x0e, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
	+0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f, +0x0f,
}

const lutClamp127Base = 1020

// lutClamp127[lutClamp127Base+x] is equal to clamp(x, -128, +127), for x in [-1020, 1020].
var lutClamp127 = [1020 + 1 + 1020]int8{
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80, -0x80,
	-0x80, -0x80, -0x80, -0x80, -0x80, -0x7f, -0x7e, -0x7d,
	-0x7c, -0x7b, -0x7a, -0x79, -0x78, -0x77, -0x76, -0x75,
	-0x74, -0x73, -0x72, -0x71, -0x70, -0x6f, -0x6e, -0x6d,
	-0x6c, -0x6b, -0x6a, -0x69, -0x68, -0x67, -0x66, -0x65,
	-0x64, -0x63, -0x62, -0x61, -0x60, -0x5f, -0x5e, -0x5d,
	-0x5c, -0x5b, -0x5a, -0x59, -0x58, -0x57, -0x56, -0x55,
	-0x54, -0x53, -0x52, -0x51, -0x50, -0x4f, -0x4e, -0x4d,
	-0x4c, -0x4b, -0x4a, -0x49, -0x48, -0x47, -0x46, -0x45,
	-0x44, -0x43, -0x42, -0x41, -0x40, -0x3f, -0x3e, -0x3d,
	-0x3c, -0x3b, -0x3a, -0x39, -0x38, -0x37, -0x36, -0x35,
	-0x34, -0x33, -0x32, -0x31, -0x30, -0x2f, -0x2e, -0x2d,
	-0x2c, -0x2b, -0x2a, -0x29, -0x28, -0x27, -0x26, -0x25,
	-0x24, -0x23, -0x22, -0x21, -0x20, -0x1f, -0x1e, -0x1d,
	-0x1c, -0x1b, -0x1a, -0x19, -0x18, -0x17, -0x16, -0x15,
	-0x14, -0x13, -0x12, -0x11, -0x10, -0x0f, -0x0e, -0x0d,
	-0x0c, -0x0b, -0x0a, -0x09, -0x08, -0x07, -0x06, -0x05,
	-0x04, -0x03, -0x02, -0x01, +0x00, +0x01, +0x02, +0x03,
	+0x04, +0x05, +0x06, +0x07, +0x08, +0x09, +0x0a, +0x0b,
	+0x0c, +0x0d, +0x0e, +0x0f, +0x10, +0x11, +0x12, +0x13,
	+0x14, +0x15, +0x16, +0x17, +0x18, +0x19, +0x1a, +0x1b,
	+0x1c, +0x1d, +0x1e, +0x1f, +0x20, +0x21, +0x22, +0x23,
	+0x24, +0x25, +0x26, +0x27, +0x28, +0x29, +0x2a, +0x2b,
	+0x2c, +0x2d, +0x2e, +0x2f, +0x30, +0x31, +0x32, +0x33,
	+0x34, +0x35, +0x36, +0x37, +0x38, +0x39, +0x3a, +0x3b,
	+0x3c, +0x3d, +0x3e, +0x3f, +0x40, +0x41, +0x42, +0x43,
	+0x44, +0x45, +0x46, +0x47, +0x48, +0x49, +0x4a, +0x4b,
	+0x4c, +0x4d, +0x4e, +0x4f, +0x50, +0x51, +0x52, +0x53,
	+0x54, +0x55, +0x56, +0x57, +0x58, +0x59, +0x5a, +0x5b,
	+0x5c, +0x5d, +0x5e, +0x5f, +0x60, +0x61, +0x62, +0x63,
	+0x64, +0x65, +0x66, +0x67, +0x68, +0x69, +0x6a, +0x6b,
	+0x6c, +0x6d, +0x6e, +0x6f, +0x70, +0x71, +0x72, +0x73,
	+0x74, +0x75, +0x76, +0x77, +0x78, +0x79, +0x7a, +0x7b,
	+0x7c, +0x7d, +0x7e, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f, +0x7f,
	+0x7f,
}

const lutClamp255Base = 255

// lutClamp255[lutClamp255Base+x] is equal to clamp(x, 0, 255), for x in [-255, 510].
var lutClamp255 = [255 + 1 + 510]uint8{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
	0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
	0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,
	0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40,
	0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50,
	0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60,
	0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,
	0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80,
	0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90,
	0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0,
	0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0,
	0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0,
	0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0,
	0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0,
	0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0,
	0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
}
